import os
import json
import base64

import streamlit as st

import lambdaSpeechToScore
import lambdaGetSample

from streamlit_mic_recorder import mic_recorder


@st.cache_data
def get_sample(category, language):
    return lambdaGetSample.get_sample(category=category, language=language)

@st.cache_data
def speech_to_score(real_text, file_bytes, language):
    result = lambdaSpeechToScore.score(real_text=real_text,
                                    file_bytes=file_bytes,
                                    language=language)
    return result

if 'started' not in st.session_state:
        st.session_state['started'] = False

# if 'audio' not in st.session_state:
#         st.session_state['audio'] = None

def start():
    st.session_state['started'] = True
    st.session_state['recorded_output'] = None

def restart():
    st.session_state['started'] = False
    st.session_state['recorded_output'] = None
    st.cache_data.clear()

if __name__ == '__main__':
    st.title("Pronunciation Assessment")
    st.subheader("version 1.0")

    st.header("Let's practice")
    if not st.session_state['started']:
        st.button("Generate a new statement", on_click=start(), use_container_width=True)
        st.stop()

    category = 1
    language = 'en'

    generated_sample = get_sample(category, language)

    if generated_sample == None:
        st.stop()
    
    real_text = generated_sample['real_transcript'][0]
    real_ipa = generated_sample['ipa_transcript']
    
    st.markdown(f'''Statement:
                    
                    {real_text}
                    ''')
    st.markdown(f'IPA transcript: /:gray[{real_ipa}]/')

    mic_recorder(start_prompt="Start recording", stop_prompt="Stop recording", just_once=False, use_container_width=True, key='recorded')

    if st.session_state['recorded_output'] == None:
        st.stop()
    
    st.audio(st.session_state['recorded_output']['bytes'])

    result = speech_to_score(real_text, st.session_state['recorded_output']['bytes'], language)
    st.markdown(f'''Your transcript:
                    
                    {result["matched_transcripts"]}
                    ''')
    st.markdown(f'Your IPA transcript: /:gray[{result["matched_transcripts_ipa"]}]/')

    if int(result["pronunciation_accuracy"]) >= 50:
         st.success(f"Your score: {result['pronunciation_accuracy']}")
    else:
         st.error(f"Your score: {result['pronunciation_accuracy']}")
         st.error("Try again")

    st.button('Start again', on_click=restart, type='primary', use_container_width=True)
         
    
